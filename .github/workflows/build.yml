name: Build LinuxDwarfPack package

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 1'

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:

    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        source scripts/build/debian.sh
        sudo apt-get install $(get_debian_build_dependencies)
        
    - name: Name package
      id: slug
      run: |
        echo "PKG_NAME=LinuxDwarfPack-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "DIR_NAME=LinuxDwarfPack-$(source version.sh)" >> $GITHUB_ENV

    - name: Build
      run: |
        echo "CT_LOG_PROGRESS_BAR=n" >> .config
        autoreconf && ./configure --prefix=$PWD && make install && bin/lnp-forge build
    - name: Upload build log
      uses: actions/upload-artifact@v2
      with:
        name: build.log
        path: build.log
      if: ${{ failure() }}

    - name: Build tar.gz
      run: |
        source .config && mv .build/src/lnp-${CT_LNP_VERSION} ${{ env.DIR_NAME }}
        tar cjf ${{ env.DIR_NAME }}.tar.bz2 ${{ env.DIR_NAME }}
    
    - name: Upload .tar package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PKG_NAME }}.tar.bz2
        path: ${{ env.DIR_NAME }}.tar.bz2
    
    - name: Install packaging dependencies
      run: |
        sudo apt-get install ruby ruby-dev rubygems build-essential bsdtar
        sudo gem install --no-document fpm
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Fix world writable dirs
      run: |
        chmod go-w $HOME
        sudo chmod -R go-w /home/linuxbrew
        sudo chmod -R go-w /home/runner
        sudo chmod -R go-w /usr/share
        sudo chmod -R go-w /usr/local
        sudo chmod -R go-w /opt

    - name: Build AppImage, deb, arch, rpm packages
      run: |
        echo "CT_APPIMAGE=y" >> .config
        echo "CT_DEBIAN=y" >> .config
        echo "CT_ARCH=y" >> .config
        echo "CT_RPM=y" >> .config
        ./configure --prefix=$PWD && make install && ./bin/lnp-forge clean build
    - name: Upload build log
      uses: actions/upload-artifact@v2
      with:
        name: build.log
        path: build.log
      if: ${{ failure() }}

    - name: Upload AppImage
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PKG_NAME }}.AppImage
        path: Dwarf_Fortress-*-x86_64.AppImage

    - name: Upload .deb package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PKG_NAME }}.deb
        path: linux-dwarf-pack_*_amd64.deb

    - name: Upload Arch package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PKG_NAME }}.pkg.tar.bz2
        path: linux-dwarf-pack-*-1-x86_64.pkg.tar.bz2

    - name: Upload .rpm package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PKG_NAME }}.rpm
        path: linux-dwarf-pack-*-1.x86_64.rpm

    - name: Content versions
      run: |
        echo "DF_VERSION=v0.$(grep CT_DF_VERSION .config|sed -e 's|.*="\(.*\)_linux"|\1|g' -e 's|_|.|g')" >> $GITHUB_ENV
        echo "DFHACK_VERSION=v$(grep CT_DFHACK_VERSION .config|sed 's|.*="\(.*\)"|\1|g')" >> $GITHUB_ENV
        echo "THERAPIST_VERSION=$(grep CT_THERAPIST_VERSION .config|sed 's|.*="\(.*\)"|\1|g')" >> $GITHUB_ENV
        echo "LEGENDS_VERSION=v$(grep CT_LEGENDS_VERSION .config|sed 's|.*="\(.*\)"|\1|g')" >> $GITHUB_ENV
        echo "ANNOUNCEMENT_VERSION=$(grep CT_ANNOUNCEMENT_VERSION .config|sed 's|.*="\(.*\)"|\1|g')" >> $GITHUB_ENV
        echo "SOUNDSENSERS_VERSION=$(grep CT_SOUNDSENSERS_VERSION .config|sed 's|.*="\(.*\)"|\1|g')" >> $GITHUB_ENV
        
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        body: |
          A simple ready-to-play pack for Linux that includes:
          - Dwarf Fortress ${{ env.DF_VERSION }}
          - DFHack + TwbT ${{ env.DFHACK_VERSION }}
          - compatible DFGraphics tilesets: Spacefox, Ironhand, Phoebus, ...
          - Dwarf Therapist ${{ env.THERAPIST_VERSION }}
          - Legends Browser ${{ env.LEGENDS_VERSION }}
          - Announcement Window ${{ env.ANNOUNCEMENT_VERSION }}
          - SoundSense RS ${{ env.SOUNDSENSERS_VERSION }}
          
          Support and feedback: [Bay12 Forums](http://www.bay12forums.com/smf/index.php?topic=157712)
        files: |
          linux-dwarf-pack_*_amd64.deb
          linux-dwarf-pack-*-1-x86_64.pkg.tar.bz2
          linux-dwarf-pack-*-1.x86_64.rpm
          Dwarf_Fortress-*-x86_64.AppImage
          ${{ env.DIR_NAME }}.tar.bz2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
